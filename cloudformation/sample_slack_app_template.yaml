AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  AppVPC:
    Description: "The VPC in which to deploy your instance"
    Type: AWS::EC2::VPC::Id
  AppSubnets:
    Description: "Select at least 2 subnets from your VPC with different Availability Zones in which to deploy your instance"
    Type: "List<AWS::EC2::Subnet::Id>"
  InstanceKeyPair:
    Description: "SSH key to log into your Slack App instance for troubleshooting purposes"
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  # Give the instance access to read and create AWS secret.
  SlackAppInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: "awssecretaccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: !Join
                  - ''
                  - - 'arn:'
                    - !Ref AWS::Partition
                    - ':secretsmanager:'
                    - !Ref AWS::Region
                    - ':'
                    - !Ref AWS::AccountId
                    - ':secret:'
                    - 'slackanalytics_app_secret*'
              - Effect: "Allow"
                Action:
                  - "secretsmanager:CreateSecret"
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  SlackAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SlackAppInstanceRole
  SlackAppALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SlackApp Instance Rules"
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: "Node.js Express App Port"
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
  SlackAppInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SlackApp Instance Rules"
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: "Node.js Express App Port for ALB security group"
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !GetAtt SlackAppALBSecurityGroup.GroupId
    DependsOn: SlackAppALBSecurityGroup
  SlackAppInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - SlackAppInstanceProfile
      - SlackAppInstanceSecurityGroup
    Properties:
      InstanceType: t2.micro
      ImageId: ami-04bf6dcdc9ab498ca
      KeyName: !Ref InstanceKeyPair
      IamInstanceProfile: !Ref SlackAppInstanceProfile
      SecurityGroupIds:
        - !GetAtt SlackAppInstanceSecurityGroup.GroupId
      SubnetId: !Select [0, !Ref AppSubnets]
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "10"
      Tags:
        - Key: Name
          Value: "QuickSight SlackApp Instance"
      UserData:
        # TODO - Consider creating a custom AMI instead.
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1

          echo "1. Install nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          echo "2. Install node.js"
          nvm install node
          node -e "console.log('Running Node.js ' + process.version)"

          echo "3. Install git"
          sudo yum update -y
          sudo yum install git -y
          git version

          echo "4. Download and deploy sample app from git"
          cd /home/ec2-user/
          git clone https://github.com/aws-pablito/aws-quicksight-slackanalytics.git
          cd aws-quicksight-slackanalytics/webapp
          npm install

          echo "5. Install pm2 and run app"
          npm install pm2 -g
          pm2 --name qs-slackanalytics-app start npm -- start
  SlackAppELB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    DependsOn: SlackAppALBSecurityGroup
    Properties:
      Subnets: !Ref AppSubnets
      SecurityGroups:
        - !GetAtt SlackAppALBSecurityGroup.GroupId
  SlackAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref AppVPC
      Targets:
        - Port: 3000
          Id: !Ref SlackAppInstance
  SlackAppELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - SlackAppELB
      - SlackAppTargetGroup
    Properties:
        Port: 3000
        LoadBalancerArn: !Ref SlackAppELB
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref SlackAppTargetGroup
  DistributionCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: "Default values but allows forwarding query strings to origin."
        Name: !Join
          - '-'
          - - "forward-qs"
            - !Ref AWS::StackName
        DefaultTTL: 5
        MaxTTL: 31536000
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
              CookieBehavior: "none"
          HeadersConfig:
              HeaderBehavior: "none"
          EnableAcceptEncodingGzip: true
          QueryStringsConfig:
            QueryStringBehavior: "all"
  SlackAppDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - DistributionCachePolicy
      - SlackAppELB
    Properties:
      DistributionConfig:
        Origins:
          - Id: ELB-quicksight-slackanalytics-lb
            DomainName: !GetAtt SlackAppELB.DNSName
            ConnectionAttempts: 3
            ConnectionTimeout: 10
            CustomOriginConfig:
              HTTPPort: 3000
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
              OriginReadTimeout: 30
              OriginKeepaliveTimeout: 5
        DefaultCacheBehavior:
            TargetOriginId: ELB-quicksight-slackanalytics-lb
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - HEAD
              - GET
            SmoothStreaming: false
            Compress: false
            CachePolicyId: !Ref DistributionCachePolicy
        PriceClass: PriceClass_100
        Enabled: true
        ViewerCertificate:
            CloudFrontDefaultCertificate: true
            MinimumProtocolVersion: TLSv1
Outputs:
  SlackAppHTTPSURL:
    Description: "The URL to reach the slack app."
    Value: !Join
      - ''
      - - "https://"
        - !GetAtt SlackAppDistribution.DomainName



